# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:02:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from ipaddress import IPv4Address
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Field, RootModel, conint


class AccessMode(BaseModel):
    delete: Optional[bool] = Field(
        None, description='Whether share allows visitors to delete contents'
    )
    download: Optional[bool] = Field(
        None, description='Whether share allows visitors to download'
    )
    modify: Optional[bool] = Field(
        None, description='Whether share allows visitors to rename or move contents.'
    )
    upload: Optional[bool] = Field(
        None, description='Whether share allows visitors to upload'
    )


class Type(Enum):
    user = 'user'


class Data(BaseModel):
    id: Optional[int] = Field(None, description='ID of master user for account')
    type: Optional[Type] = Field(None, examples=['user'])


class MasterUser(BaseModel):
    data: Optional[Data] = None


class Relationships(BaseModel):
    masterUser: Optional[MasterUser] = None


class Type1(Enum):
    account = 'account'


class AllowedIpItem(BaseModel):
    ipEnd: Optional[str] = None
    ipStart: Optional[str] = None


class Branding(Enum):
    boolean_True = True
    boolean_False = False


class CustomDomain(Enum):
    boolean_True = True
    boolean_False = False


class Status(Enum):
    integer_1 = 1
    integer_0 = 0


class BrandingSettings(BaseModel):
    companyName: Optional[str] = Field(None, examples=[None])
    customEmail: Optional[EmailStr] = Field(None, examples=['custom@example.com'])
    logo: Optional[str] = Field(None, examples=['examplelogo.png'])
    logoExt: Optional[str] = Field(None, examples=['png'])
    theme: Optional[str] = Field(None, examples=['default'])
    verifiedDomain: Optional[str] = None
    verifiedDomainId: Optional[str] = None
    verifiedDomainValid: Optional[bool] = None


class EmailListAttributes(BaseModel):
    created: Optional[datetime] = Field(None, description='Created datetime')
    emails: Optional[List[str]] = Field(
        None, description='Recipient emails in the email list'
    )
    modified: Optional[datetime] = Field(None, description='Modified datetime')
    name: Optional[str] = Field(None, description='Short title for email list')


class EmptyResponse(BaseModel):
    data: Optional[List[str]] = Field(None, examples=[[]])
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response. ', examples=[200]
    )


class Error(BaseModel):
    code: Optional[str] = Field(
        None, description='Specific internal error string.', examples=['<_ERROR_CODE>']
    )
    detail: Optional[str] = Field(
        None,
        description='human-readable explanation specific to this occurrence of the problem.',
        examples=['<_DETAIL>'],
    )
    meta: Optional[Dict[str, Any]] = Field(
        None,
        description='Meta object containing non-standard meta-information about the error.',
        examples=['<_META_OBJECT>'],
    )
    title: Optional[str] = Field(
        None,
        description='Human readable summary of the problem.',
        examples=['<_TITLE>'],
    )
    responseStatus: Literal['Error']


class Type2(Enum):
    share = 'share'


class Data1(BaseModel):
    id: Optional[int] = Field(None, description='ID of the share. ', examples=[22])
    type: Optional[Type2] = Field(
        None, description='Type is share. ', examples=['share']
    )


class Share(BaseModel):
    data: Optional[Data1] = None


class Relationships1(BaseModel):
    share: Optional[Share] = None


class Status1(Enum):
    pending = 'pending'
    completed = 'completed'


class FormEntryField(BaseModel):
    name: Optional[str] = Field(
        None, description='Field name', examples=['Email Adress']
    )
    order: Optional[int] = Field(
        None, description='Field order in the form', examples=[1]
    )
    value: Optional[str] = Field(
        None, description='Field value', examples=['example@example.com']
    )


class Settings(BaseModel):
    description: Optional[str] = Field(
        None, description='Secondary description of field.', examples=[None]
    )
    isRequired: Optional[bool] = Field(
        None,
        description='Whether this field must be completed before form can be submitted',
        examples=[False],
    )
    senderEmail: Optional[bool] = None
    useAsFolderName: Optional[bool] = Field(
        None,
        description='Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the `fileDropCreateFolders` parameter on the receive folder is `true`. `isRequired` must be set to `true` if this setting is `true`.',
        examples=[False],
    )
    width: Optional[float] = Field(
        None,
        description='How much of the available width the field should occupy',
        examples=[0.5],
    )


class Type3(Enum):
    email = 'email'
    textarea = 'textarea'
    name = 'name'
    text = 'text'


class FormField(BaseModel):
    id: Optional[int] = Field(
        None, description='ID of the form field. ', examples=[1185]
    )
    name: Optional[str] = Field(
        None, description='Label of the field.', examples=['Your Name']
    )
    order: Optional[int] = Field(
        None,
        description='Order that field appears on the form, starting from 0',
        examples=[0],
    )
    settings: Optional[Settings] = Field(None, description='Advanced field settings')
    type: Optional[Type3] = Field(None, description='Field type')


class Settings1(BaseModel):
    fileTypes: Optional[str] = Field(
        None,
        description='File types that can be uploaded. Comma-delimited string of MIME file types.',
        examples=[None],
    )


class Type4(Enum):
    upload_area = 'upload_area'


class FormFieldUploadArea(BaseModel):
    id: Optional[int] = Field(
        None, description='ID of the form field. ', examples=[1103]
    )
    name: Optional[str] = Field(
        None, description='Label of the field (not used).', examples=['Upload Area']
    )
    order: Optional[int] = Field(
        None,
        description='Order that field appears on the form, starting from 0',
        examples=[0],
    )
    settings: Optional[Settings1] = Field(None, description='Advanced field settings')
    type: Optional[Type4] = Field(None, description='Type is upload_area.')


class Type5(Enum):
    user = 'user'


class Data2(BaseModel):
    id: Optional[int] = Field(None, examples=[12345])
    type: Optional[Type5] = Field(None, examples=['user'])


class OwnerUser(BaseModel):
    data: Optional[Data2] = None


class Data3(BaseModel):
    id: Optional[int] = Field(None, examples=[2345])
    type: Optional[str] = Field(None, examples=['resource'])


class Resource(BaseModel):
    data: Optional[Data3] = None


class Data4(BaseModel):
    id: Optional[int] = Field(None, examples=[2])
    type: Optional[str] = Field(None, examples=['share'])


class Share1(BaseModel):
    data: Optional[Data4] = None


class Relationships2(BaseModel):
    ownerUser: Optional[OwnerUser] = None
    resource: Optional[Resource] = None
    share: Optional[Share1] = None


class Action(Enum):
    upload = 'upload'
    download = 'download'
    delete = 'delete'
    all = 'all'


class SendEmail(Enum):
    boolean_True = True
    boolean_False = False


class Type6(Enum):
    file = 'file'
    folder = 'folder'
    shared_folder = 'shared_folder'
    send_receipt = 'send_receipt'
    share_receipt = 'share_receipt'
    file_drop = 'file_drop'


class NotificationRecipient(BaseModel):
    created: Optional[datetime] = Field(
        None,
        description='Timestamp of adding notification recipient.',
        examples=['2011-03-21T00:18:56Z'],
    )
    email: Optional[str] = Field(
        None, description='Recipient email.', examples=['exampleuser@example.com']
    )
    id: Optional[int] = Field(None, description='ID of the recipient.', examples=[2])
    modified: Optional[datetime] = Field(
        None,
        description='Timestamp of notification recipient modification.',
        examples=['2011-03-21T00:18:56Z'],
    )
    notificationId: Optional[int] = Field(
        None,
        description='ID of the notification that the recipient belongs to.',
        examples=[23],
    )


class WebhookOptions(BaseModel):
    amount: Optional[int] = None
    includeTriggers: Optional[str] = None
    restrictionTypes: Optional[List[str]] = None


class PlanDetails(BaseModel):
    apiKeys: Optional[int] = None
    apiTokens: Optional[int] = None
    colorSchema: Optional[bool] = None
    customDomain: Optional[bool] = None
    customName: Optional[bool] = None
    directLinks: Optional[bool] = None
    ipWhitelist: Optional[bool] = None
    sharingOptions: Optional[List[str]] = None
    sshKeys: Optional[int] = None
    storageAddOn: Optional[int] = None
    unlimitedUsers: Optional[bool] = None
    userExpiration: Optional[bool] = None
    userImport: Optional[bool] = None
    webhookOptions: Optional[WebhookOptions] = None


class Attributes1(BaseModel):
    image: Optional[str] = Field(
        None,
        description='Binary image content, base64 encoded.',
        examples=['iVBORw0KGgoAAAANSUhEUgAAACIAAAAoCAYAAACb3CikAAAABGdBTUEAALGPC'],
    )
    imageHash: Optional[str] = Field(
        None,
        description='hash of the image.',
        examples=['6afaa3ef4056dc602ccfc69ab52d6f40'],
    )
    pageCount: Optional[int] = Field(
        None,
        description='Amount of pages available in the file. Used only for multipage documents.',
        examples=[10],
    )
    size: Optional[int] = Field(
        None, description='Size of the image in bytes.', examples=[2186]
    )


class PreviewFile(BaseModel):
    attributes: Optional[Attributes1] = None
    id: Optional[int] = Field(None, examples=[1])
    type: Optional[str] = Field(None, examples=['preview'])


class PreviewFileResponse(BaseModel):
    data: Optional[PreviewFile] = None
    responseStatus: Optional[int] = Field(
        None, description='HTTP Status Code', examples=[200]
    )


class Quota(BaseModel):
    bandwidthLimit: Optional[int] = Field(
        None, description='Total number of bytes that can be transferred per month.'
    )
    bandwidthUsed: Optional[int] = Field(
        None, description='Number of bytes transferred this month.'
    )
    diskLimit: Optional[int] = Field(
        None,
        description='Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.',
        examples=[375809638400],
    )
    diskUsed: Optional[int] = Field(
        None,
        description='Amount of disk space currently in use.',
        examples=[1225352192],
    )
    noticeEnabled: Optional[bool] = Field(
        None,
        description='Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?',
        examples=[True],
    )
    noticeThreshold: Optional[int] = Field(
        None,
        description='Treshold that triggers a quota notification. This represents the "percent full" your account must be before the quota notification is generated.',
        examples=[80],
    )
    transactionsLimit: Optional[int] = Field(
        None, description='Total number of transactions allowed in a 24-hour period.'
    )
    transactionsNoticeEnabled: Optional[bool] = Field(
        None,
        description='Whether an email should be sent to the account owner up to once per day if transaction usage exceeds `transactionsNoticeThreshold` value.',
    )
    transactionsNoticeThreshold: Optional[int] = Field(
        None,
        description='Percent of daily transactions limit that will trigger an email if activity exceeds it.',
    )


class RelationshipData(BaseModel):
    id: Optional[int] = Field(None, description='ID number of related record')
    type: Optional[str] = Field(None, description='Kind of record')


class Data5(BaseModel):
    id: Optional[int] = Field(None, examples=[2])
    type: Optional[str] = Field(None, examples=['directFile'])


class DirectFile(BaseModel):
    data: Optional[Data5] = None


class Data6(BaseModel):
    id: Optional[int] = Field(None, examples=[2])
    type: Optional[str] = Field(None, examples=['notification'])


class Notification1(BaseModel):
    data: Optional[Data6] = None


class Data7(BaseModel):
    id: Optional[int] = Field(None, examples=[2])
    type: Optional[str] = Field(None, examples=['resource'])


class ParentResource(BaseModel):
    data: Optional[Data7] = None


class Data8(BaseModel):
    id: Optional[int] = Field(None, examples=[2345])
    type: Optional[str] = Field(None, examples=['share'])


class Share2(BaseModel):
    data: Optional[Data8] = None


class Relationships3(BaseModel):
    directFile: Optional[DirectFile] = None
    notifications: Optional[List[Notification1]] = None
    parentResource: Optional[ParentResource] = None
    share: Optional[Share2] = None


class Type7(Enum):
    resource = 'resource'


class Previewable(Enum):
    boolean_True = True
    boolean_False = False


class Type8(Enum):
    file = 'file'
    dir = 'dir'


class ResourceAttributes(BaseModel):
    accessedAt: Optional[datetime] = Field(
        None,
        description='Date-time of the time when resource was accessed.',
        examples=['2011-03-21T00:18:56-07:00'],
    )
    accessedTime: Optional[int] = Field(
        None, description='UNIX timestamp of last access'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='Date-time of resource creation.',
        examples=['2011-03-21T00:18:56-07:00'],
    )
    createdBy: Optional[str] = Field(
        None, description='Username of the creator.', examples=['exampleuser']
    )
    createdTime: Optional[int] = Field(
        None, description='UNIX timestamp of resource creation'
    )
    extension: Optional[str] = Field(
        None,
        description='Resource extension. Property exists only if resource `type` is file.',
    )
    fileCount: Optional[int] = Field(
        None,
        description='Number of files within folder. null if resource type is a file.',
    )
    hash: Optional[str] = Field(
        None,
        description='Unique hash of the resource.',
        examples=['ec4aa9a91be282666a165899a14f29b1'],
    )
    name: Optional[str] = Field(
        None,
        description='Resource name, e.g. the name of the file or folder.',
        examples=['examplefolder'],
    )
    path: Optional[str] = Field(
        None, description='Full path to the resource.', examples=['/examplefolder']
    )
    previewable: Optional[Previewable] = Field(
        None,
        description='Can resource be previewed. Property equals `null` if resource `type` is dir.',
        examples=[True],
    )
    size: Optional[int] = Field(
        None, description='Resource size in bytes', examples=[0]
    )
    type: Optional[Type8] = Field(None, description='Type of the resource.')
    updatedAt: Optional[datetime] = Field(
        None,
        description='Date-time of resource modification.',
        examples=['2011-03-21T00:18:56-07:00'],
    )
    updatedTime: Optional[int] = Field(
        None, description='UNIX timestamp of resource modification'
    )
    uploadDate: Optional[datetime] = Field(
        None,
        description='Timestamp of resource upload.',
        examples=['2011-03-21T00:18:56-07:00'],
    )


class Type9(Enum):
    resource = 'resource'


class ResourceDelete(BaseModel):
    id: Optional[int] = Field(None, examples=[1])
    meta: Optional[Dict[str, Any]] = Field(
        None,
        description='Meta object containing non-standard meta-information about the delete operation.',
        examples=[{'id': 2321}],
    )
    type: Optional[Type9] = Field(
        None, description='Type of item. "resource"', examples=['resource']
    )
    responseStatus: Literal['ResourceDelete']


class Responses(RootModel[Union[ResourceDelete, Error]]):
    root: Union[ResourceDelete, Error] = Field(..., discriminator='responseStatus')


class ResourceMultiResponse(BaseModel):
    responses: Optional[List[Responses]] = None


class Data9(BaseModel):
    id: Optional[int] = None
    type: Optional[str] = None


class OwnerUser1(BaseModel):
    data: Optional[Data9] = None


class Relationships4(BaseModel):
    ownerUser: Optional[OwnerUser1] = None


class Type10(Enum):
    sshKey = 'sshKey'


class SSHKeyAttributes(BaseModel):
    created: Optional[datetime] = Field(
        None, description='The date-time the SSH Key was created.'
    )
    fingerprint: Optional[str] = Field(
        None,
        description='The Key Fingerprint. The fingerprint can be used to identify and keep track of the key without exposing the actual credential. ',
    )
    lastLogin: Optional[datetime] = Field(
        None, description='The date-time the SSH Key was last used to access ExaVault. '
    )


class Attributes2(BaseModel):
    bytesTransferred: Optional[int] = Field(None, examples=[10815676])
    created: Optional[str] = Field(None, examples=['2019-10-18T06:48:40Z'])
    duration: Optional[int] = Field(None, examples=[5])
    fileName: Optional[str] = Field(
        None, examples=['/test2/Cassandra2020The20Definitive20Guide.2030947496.pdf']
    )
    fileSource: Optional[str] = Field(None, examples=[''])
    ipAddress: Optional[str] = Field(None, examples=['185.223.113.224'])
    operation: Optional[str] = Field(None, examples=['PASS'])
    protocol: Optional[str] = Field(None, examples=['web'])
    sessionId: Optional[str] = Field(
        None, examples=['5da9b4a8bd961dfa0a56fa0dc15aaffe57069271b389e']
    )
    status: Optional[str] = Field(None, examples=['-'])
    username: Optional[str] = Field(None, examples=['ykravchuk'])


class Type11(Enum):
    sessionActivity = 'sessionActivity'


class SessionActivityEntry(BaseModel):
    attributes: Optional[Attributes2] = None
    id: Optional[int] = Field(None, examples=[12345])
    type: Optional[Type11] = Field(None, examples=['sessionActivity'])


class SessionActivityResponse(BaseModel):
    data: Optional[List[SessionActivityEntry]] = None
    responseStatus: Optional[int] = Field(None, examples=[200])
    returnedResults: Optional[int] = Field(None, examples=[2])
    totalResults: Optional[int] = Field(None, examples=[2])


class Type12(Enum):
    message = 'message'


class Data10(BaseModel):
    id: Optional[int] = Field(None, description='ID of the message.', examples=[21])
    type: Optional[Type12] = Field(
        None, description='Type is message. ', examples=['message']
    )


class Message(BaseModel):
    data: Optional[Data10] = Field(None, title='ShareMessageData')


class Type13(Enum):
    notification = 'notification'


class Data11(BaseModel):
    id: Optional[int] = Field(
        None, description='ID of the notification. ', examples=[9]
    )
    type: Optional[Type13] = Field(
        None, description='Type is notification. ', examples=['notification']
    )


class Notification2(BaseModel):
    data: Optional[Data11] = None


class Data12(BaseModel):
    id: Optional[int] = Field(None, description='ID of the owner.', examples=[12345])
    type: Optional[str] = Field(None, description='Type is user.')


class Owner(BaseModel):
    data: Optional[Data12] = None


class Type14(Enum):
    resource = 'resource'


class Data13(BaseModel):
    id: Optional[int] = Field(
        None, description='ID of the shared resource.', examples=[12345]
    )
    type: Optional[Type14] = Field(
        None, description='Type is resource. ', examples=['resource']
    )


class Resource1(BaseModel):
    data: Optional[Data13] = Field(None, title='ShareResourceData')


class Relationships5(BaseModel):
    messages: Optional[List[Message]] = None
    notifications: Optional[List[Notification2]] = None
    owner: Optional[Owner] = Field(None, title='ShareRelationshipsOwner')
    resources: Optional[List[Resource1]] = None


class Type15(Enum):
    share = 'share'


class Expired(Enum):
    boolean_True = True
    boolean_False = False


class FileDropCreateFolders(Enum):
    boolean_True = True
    boolean_False = False


class HasNotification(Enum):
    boolean_True = True
    boolean_False = False


class HasPassword(Enum):
    boolean_True = True
    boolean_False = False


class Inherited(Enum):
    boolean_True = True
    boolean_False = False


class Public(Enum):
    boolean_True = True
    boolean_False = False


class Status2(Enum):
    integer_0 = 0
    integer_1 = 1


class TrackingStatus(Enum):
    complete = 'complete'
    incomplete = 'incomplete'
    pending = 'pending'


class Type16(Enum):
    shared_folder = 'shared_folder'
    send = 'send'
    receive = 'receive'


class ShareMessage(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Share invitation message text.',
        examples=['You have files available for download.'],
    )
    created: Optional[datetime] = Field(
        None,
        description='Timestamp of message creation.',
        examples=['2017-01-26T18:10:47Z'],
    )
    id: Optional[int] = Field(None, description='Message id.', examples=[397584])
    modified: Optional[datetime] = Field(
        None,
        description='Timestamp of message modification.',
        examples=['2017-01-28T13:10:47Z'],
    )
    shareId: Optional[int] = Field(
        None, description='ID of associated share', examples=[3544253]
    )
    subject: Optional[str] = Field(
        None,
        description='Share invitation message subject.',
        examples=['Files available for download'],
    )
    userId: Optional[int] = Field(
        None, description='User ID who generated share invite', examples=[119394]
    )


class Received(Enum):
    boolean_True = True
    boolean_False = False


class Sent(Enum):
    boolean_True = True
    boolean_False = False


class Type17(Enum):
    owner = 'owner'
    direct = 'direct'


class ShareRecipient(BaseModel):
    created: Optional[datetime] = Field(
        None,
        description='Timestamp of adding recipient to the share.',
        examples=['2017-01-26T18:10:47Z'],
    )
    email: Optional[str] = Field(
        None, description='Recipient email address.', examples=['recipient@example.com']
    )
    hash: Optional[str] = Field(None, description='Share hash.', examples=['fseowxan'])
    id: Optional[int] = Field(None, description='ID of the recipient.', examples=[2])
    received: Optional[Received] = Field(
        None,
        description='Set to true if recipient has accessed the share. Note this is set to true when the recipient clicks the link to access the share; not when they download a file.',
        examples=[False],
    )
    sent: Optional[Sent] = Field(
        None,
        description='Set to true if invite email was sent; false otherwise.',
        examples=[True],
    )
    shareId: Optional[str] = Field(
        None,
        description='ID of the share that the recipoient belongs to.',
        examples=[23],
    )
    type: Optional[Type17] = Field(
        None, description='Type of the recipient.', examples=['owner']
    )


class ShareRecipientsResponse(BaseModel):
    data: Optional[List[EmailStr]] = Field(
        None, examples=[['test+3@example.com', 'test+4@example.com']]
    )
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )


class Type18(Enum):
    resource = 'resource'


class Data14(BaseModel):
    id: Optional[int] = Field(None, description='ID of home directory resource.')
    type: Optional[Type18] = Field(
        None, description='Type is resource.', examples=['resource']
    )


class HomeResource(BaseModel):
    data: Optional[Data14] = None


class Type19(Enum):
    account = 'account'


class Data15(BaseModel):
    id: Optional[int] = Field(None, description='ID of the account.')
    type: Optional[Type19] = Field(
        None, description='Type is account.', examples=['account']
    )


class OwnerAccount(BaseModel):
    data: Optional[Data15] = None


class Relationships6(BaseModel):
    homeResource: Optional[HomeResource] = None
    ownerAccount: OwnerAccount


class Role(Enum):
    user = 'user'
    admin = 'admin'
    master = 'master'


class UserPermissions(BaseModel):
    changePassword: bool = Field(
        ..., description='Change (own) password permission flag'
    )
    delete: bool = Field(..., description='Delete permission flag')
    deleteFormData: bool = Field(
        ...,
        description='Delete form data permission flag. If true, user can remove data that was submitted for a receive folder. This applies only to data submitted in the receive folder form, not the actual files uploaded.',
    )
    download: bool = Field(..., description='Download permission flag')
    list: bool = Field(..., description='View folder contents permission flag')
    modify: bool = Field(..., description='Modify permission flag')
    notification: bool = Field(..., description='Notifications permission flag')
    share: bool = Field(..., description='Sharing permission flag')
    upload: bool = Field(..., description='Upload permission flag')
    viewFormData: bool = Field(
        ...,
        description='Access Form Data permission flag. If true, user can view submissions that have been stored for a receive folder. This includes any data submitted in the receive folder form.',
    )


class Data16(BaseModel):
    id: Optional[int] = Field(None, description='Account ID', examples=[23422])
    type: Optional[str] = Field(
        None, description='Type of thing it is "account"', examples=['account']
    )


class OwnerAccount1(BaseModel):
    data: Optional[Data16] = None


class Data17(BaseModel):
    id: Optional[int] = Field(
        None,
        description='ID of the resource associated with the webhook',
        examples=[134122],
    )
    type: Optional[str] = Field(
        None, description='Type of thing it is. "resource"', examples=['resource']
    )


class Resource2(BaseModel):
    data: Optional[Data17] = None


class Relationships7(BaseModel):
    ownerAccount: Optional[OwnerAccount1] = None
    resource: Optional[Resource2] = None


class Details(BaseModel):
    accountName: Optional[str] = Field(None, description='Account master username')
    attempt: Optional[int] = Field(
        None, description='Number of times the system has attempted to send'
    )
    attemptId: Optional[str] = Field(None, description='Entry - retry identifier')
    event: Optional[str] = Field(None, description='Type of related activity')
    protocol: Optional[str] = Field(
        None, description='Type of connection used for related activity'
    )
    username: Optional[str] = Field(
        None,
        description='Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or "publ',
    )


class Event(Enum):
    resources_upload = 'resources.upload'
    resources_download = 'resources.download'
    resources_delete = 'resources.delete'
    resources_rename = 'resources.rename'
    resources_copy = 'resources.copy'
    resources_move = 'resources.move'
    resources_compress = 'resources.compress'
    resources_extract = 'resources.extract'
    resources_createFolder = 'resources.createFolder'
    shares_formSubmit = 'shares.formSubmit'


class WebhookActivityAttributesV1(BaseModel):
    accountId: Optional[str] = Field(None, description='Unique ID of account')
    attemptId: Optional[str] = Field(None, description='Event - retry identifier')
    created: Optional[str] = Field(
        None, description='Date and time of webhook message being generated by system'
    )
    details: Optional[Details] = Field(None, title='WebhookV1Details')
    endpointUrl: Optional[AnyUrl] = Field(
        None, description='The URL the message was sent to'
    )
    event: Optional[Event] = Field(None, description='Event type')
    ipAddress: Optional[str] = Field(None, description='IP Address of related activity')
    resend: Optional[bool] = Field(
        None, description='Whether this attempt was a re-send of a previous attempt'
    )
    resourcePath: Optional[str] = Field(
        None, description='Path of resource that matched webhook'
    )
    response: Optional[str] = Field(
        None, description='Body of web response returned by webhook listener'
    )
    status: Optional[int] = Field(
        None, description='HTTP Status Code returned by webhook listener'
    )
    username: Optional[str] = Field(None, description='Username of related activity')
    webhookFormat: Literal['WebhookActivityAttributesV1'] = Field(
        ..., description='What version of webhook message is being sent `v1`'
    )
    webhookId: Optional[int] = Field(
        None, description='Unique ID of webhook configuration'
    )
    webhookPath: Optional[str] = Field(
        None, description='Path that webhook is watching'
    )


class Resource3(BaseModel):
    accessedAt: Optional[datetime] = Field(
        None, description='Date and time resource was most recently downloaded'
    )
    createdAt: Optional[datetime] = Field(
        None, description='Date and time of resource creation'
    )
    createdBy: Optional[str] = Field(
        None, description='Username who originally created resource'
    )
    fileCount: Optional[int] = Field(
        None,
        description='Number of resources contained in this folder. If this is a file, fileCount is null',
    )
    hash: Optional[str] = Field(None, description='Resource hash value')
    id: Optional[int] = Field(None, description='Resource ID')
    name: Optional[str] = Field(None, description='Resource name')
    path: Optional[str] = Field(None, description='Full path to resource')
    previewable: Optional[bool] = Field(
        None, description='Whether the resource can be previewed'
    )
    size: Optional[int] = Field(None, description='Size of resource in bytes')
    type: Optional[str] = Field(None, description='Type of resource `file` or `dir`')
    updatedAt: Optional[datetime] = Field(
        None, description='Date and time resource was most recently changed'
    )
    uploadDate: Optional[datetime] = Field(
        None, description='Date resource was first uploaded'
    )


class ShareItem(BaseModel):
    accessDescription: Optional[str] = Field(
        None,
        description='Human readable description of what visitors are allowed to do with the receive folder',
    )
    accessMode: Optional[AccessMode] = None
    assets: Optional[List[str]] = Field(
        None, description='List of items included in the share'
    )
    created: Optional[datetime] = Field(None, description='Date and ti')
    embed: Optional[bool] = Field(
        None, description='Whether the receive folder can be embedded within a web page'
    )
    expiration: Optional[str] = Field(
        None, description='Date and time when the receive folder will no longer be '
    )
    expired: Optional[bool] = Field(
        None, description='Whether access to the receive folder has expired'
    )
    fileDropCreateFolders: Optional[bool] = Field(
        None,
        description='Whether files should be automatically placed in subfolders of the receive folder',
    )
    formId: Optional[int] = Field(None, description='ID of the associated form')
    hasNotification: Optional[bool] = Field(
        None, description='Whether delivery receipts are enabled for this share'
    )
    hasPassword: Optional[bool] = Field(
        None,
        description='Whether the receive folder requires visitors to enter a password',
    )
    hash: Optional[str] = Field(None, description='Hash value of the receive')
    id: Optional[int] = Field(
        None, description='Unique ID of associated receive folder'
    )
    inherited: Optional[bool] = Field(
        None, description='Whether this share is inherited from a parent fol'
    )
    isPublic: Optional[bool] = Field(
        None,
        description='Whether visitors can acccess the receive folder without an invitation link',
    )
    messages: Optional[List[ShareMessage]] = Field(
        None, description='Invitation messages sent for receive folder'
    )
    modified: Optional[datetime] = Field(
        None, description='Date and time when the share was last changed'
    )
    name: Optional[str] = Field(None, description='Name of receiv')
    ownerHash: Optional[str] = Field(
        None, description='Hash value of the user who "owns" the receive fo'
    )
    paths: Optional[List[str]] = Field(None, description='List')
    recipients: Optional[List[ShareRecipient]] = Field(
        None, description='List of recipients invited  to the receive folder'
    )
    requireEmail: Optional[bool] = Field(
        None,
        description='Whether visitors must enter their email addresses to access the receive folder',
    )
    resent: Optional[bool] = Field(
        None,
        description='Whether invitations to the receive folder have been re-sent to recipients',
    )
    status: Optional[int] = Field(None, description='1 if share is active. 0 if not.')
    trackingStatus: Optional[str] = Field(
        None, description='Status of invitations sent for this receive folder'
    )
    type: Optional[str] = Field(None, description='Type of share **"receive"**')


class EventData(BaseModel):
    formDetails: Optional[List[Dict[str, Any]]] = None
    resources: Optional[List[Resource3]] = None
    share: Optional[List[ShareItem]] = None
    transferStatus: Optional[str] = Field(
        None,
        description='For uploads, and downloads, whether the file transferred OK. `success` means the transfer did not have errors',
    )


class Details1(BaseModel):
    accountName: Optional[str] = Field(None, description='Account master username')
    attemptId: Optional[str] = Field(None, description='Entry - retry identifier')
    event: Optional[str] = Field(None, description='Type of related activity')
    eventData: Optional[EventData] = Field(None, title='WebhookV2EventData')
    eventTimestamp: Optional[datetime] = Field(
        None, description='Date and time event originally took place'
    )
    ipAddress: Optional[str] = Field(None, description='IP address of related activity')
    protocol: Optional[str] = Field(
        None, description='Type of connection used for related activity'
    )
    username: Optional[str] = Field(
        None,
        description='Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or "publ',
    )


class WebhookActivityAttributesV2(BaseModel):
    accountId: Optional[str] = Field(None, description='Unique ID of account')
    attemptId: Optional[str] = Field(None, description='Event - retry identifier')
    created: Optional[str] = Field(
        None, description='Date and time of webhook message being generated by system'
    )
    details: Optional[Details1] = Field(None, title='WebhookV2Details')
    endpointUrl: Optional[AnyUrl] = Field(
        None, description='The URL the message was sent to'
    )
    event: Optional[Event] = Field(None, description='Event type')
    ipAddress: Optional[str] = Field(None, description='IP Address of related activity')
    resend: Optional[bool] = Field(
        None, description='Whether this attempt was a re-send of a previous attempt'
    )
    resourcePath: Optional[str] = Field(
        None, description='Path of resource that matched webhook'
    )
    response: Optional[str] = Field(
        None, description='Body of web response returned by webhook listener'
    )
    status: Optional[int] = Field(
        None, description='HTTP Status Code returned by webhook listener'
    )
    username: Optional[str] = Field(None, description='Username of related activity')
    webhookFormat: Literal['WebhookActivityAttributesV2'] = Field(
        ..., description='What version of webhook message is being sent `v2`'
    )
    webhookId: Optional[int] = Field(
        None, description='Unique ID of webhook configuration'
    )
    webhookPath: Optional[str] = Field(
        None, description='Path that webhook is watching'
    )


class Type20(Enum):
    webhookActivity = 'webhookActivity'


class WebhookActivityEntry(BaseModel):
    attributes: Optional[
        Union[WebhookActivityAttributesV2, WebhookActivityAttributesV1]
    ] = Field(None, discriminator='webhookFormat')
    id: Optional[int] = Field(None, examples=[12345])
    type: Optional[Type20] = Field(None, examples=['webhookActivity'])


class WebhookActivityResponse(BaseModel):
    data: Optional[List[WebhookActivityEntry]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Number of results returned. ', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total results found.', examples=[2]
    )


class ResponseVersion(Enum):
    v1 = 'v1'
    v2 = 'v2'


class Resources(BaseModel):
    compress: Optional[bool] = Field(
        None,
        description='Send webhook messages when resources are compressed into an archive.',
    )
    copy_: Optional[bool] = Field(
        None,
        alias='copy',
        description='Send webhook messages when resources are copied.',
    )
    createFolder: Optional[bool] = Field(
        None, description='Send webhook messages when a new folder is created.'
    )
    delete: Optional[bool] = Field(
        None, description='Send webhook messages when resources are deleted'
    )
    download: Optional[bool] = Field(
        None, description='Send webhook messages when resources are downloaded.'
    )
    extract: Optional[bool] = Field(
        None,
        description='Send webhook messages when resources are extracted from an archive.',
    )
    move: Optional[bool] = Field(
        None, description='Send webhook messages when resources are moved.'
    )
    rename: Optional[bool] = Field(
        None, description='Send webhook messages when resources are renamed.'
    )
    upload: Optional[bool] = Field(
        None, description='Send webhook messages when resources are uploaded.'
    )


class Shares(BaseModel):
    formSubmit: Optional[bool] = Field(
        None,
        description='Send webhook messages when a receive folder form is submitted.',
    )


class WebhookTriggers(BaseModel):
    resources: Optional[Resources] = None
    shares: Optional[Shares] = None


class AllowedIpRange(BaseModel):
    ipEnd: Optional[IPv4Address] = None
    ipStart: Optional[IPv4Address] = None


class BrandingSettings1(BaseModel):
    companyName: Optional[str] = Field(
        None, description='Custom company name to include in copyright and title bar.'
    )
    customEmail: Optional[EmailStr] = Field(
        None,
        description='Address to use as sender of email messages generated by ExaVault',
        examples=['custom@example.com'],
    )
    theme: Optional[str] = Field(
        None,
        description='Color scheme for web file manager. Valid options are **default**, **light** and **dark**',
        examples=['default'],
    )


class Quota1(BaseModel):
    noticeEnabled: Optional[bool] = Field(
        None,
        description='Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.',
    )
    noticeThreshold: Optional[int] = Field(
        None,
        description='Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).',
    )
    transactionsNoticeEnabled: Optional[bool] = Field(
        None,
        description='Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.',
    )
    transactionsNoticeThreshold: Optional[int] = Field(
        None,
        description='Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).',
    )


class AccountPatchRequest(BaseModel):
    accountOnboarding: Optional[bool] = Field(
        None,
        description='Whether extra help popups can be enabled for users in the web file manager.',
        examples=[True],
    )
    allowedIpRanges: Optional[List[AllowedIpRange]] = Field(
        None, description='IP Address Ranges for restricting account access'
    )
    brandingSettings: Optional[BrandingSettings1] = Field(
        None, title='BrandingSettingsValues'
    )
    complexPasswords: Optional[bool] = Field(
        None,
        description='Whether to require complex passwords for all passwords.',
        examples=[False],
    )
    customSignature: Optional[str] = Field(
        None,
        description='Signature to be automatically added to the bottom of emails generated by the account.',
    )
    emailContent: Optional[str] = Field(
        None,
        description='Content of welcome email template.',
        examples=[
            "Great news, your new account is ready! For your records, we've listed information you'll use to log in below: FTP Server: [[ftpserver]] Username (Web and FTP access): [[username]] [[setpassword]]"
        ],
    )
    emailSubject: Optional[str] = Field(
        None,
        description='Subject line for welcome emails',
        examples=['ExaVault File Sharing Account'],
    )
    externalDomain: Optional[str] = Field(
        None,
        description='Custom address used for web file manager. Not available for all account types.',
    )
    quota: Optional[Quota1] = Field(None, description='', title='AccountQuotaValues')
    secureOnly: Optional[bool] = Field(
        None,
        description='Whether unencrypted FTP connections should be denied for the account.',
        examples=[False],
    )
    showReferralLinks: Optional[bool] = Field(
        None,
        description='Whether to display links for others to sign up on share views and invitation emails',
        examples=[False],
    )


class EmailListsPostRequest(BaseModel):
    emails: List[str] = Field(
        ...,
        description='Array of email addresses to include in the email list. ',
        examples=[['johns@example.com', 'jdoe@example.com']],
    )
    name: str = Field(
        ..., description='Name of the email list. ', examples=['My friends list']
    )


class EmailListsIdPatchRequest(BaseModel):
    emails: Optional[List[str]] = Field(
        None,
        description='Email addresses that replace existing list.',
        examples=[['yuk@example.com', 'jdoe@example.com']],
    )
    name: Optional[str] = Field(
        None, description='Name of the email list.', examples=['My friends list']
    )


class EmailReferralPostRequest(BaseModel):
    emails: List[EmailStr]
    message: str = Field(
        ...,
        examples=[
            'I use ExaVault for secure file sending, and so should you. Follow my link to sign up for a trial.'
        ],
    )


class Include(Enum):
    share = 'share'


class Settings2(BaseModel):
    isRequired: Optional[bool] = Field(
        None,
        description='True is the form element is required for submission. ',
        examples=[True],
    )
    senderEmail: Optional[bool] = Field(None, examples=[False])
    useAsFolderName: Optional[bool] = Field(
        None,
        description='True if the submitted response should be used as the name for the new folder. ',
        examples=[False],
    )


class Type21(Enum):
    name = 'name'
    email = 'email'
    text = 'text'
    textarea = 'textarea'
    upload_area = 'upload_area'


class Element(BaseModel):
    id: Optional[int] = Field(
        None,
        description="ID of the form element. If you're adding a new element to the form, do not include this field.",
        examples=[123],
    )
    name: Optional[str] = Field(
        None, description='Name of the form element.', examples=['Your name']
    )
    order: Optional[int] = Field(
        None,
        description='The order the fields will be displayed to the recipient. Starts at 0. ',
        examples=[0],
    )
    settings: Optional[Settings2] = None
    type: Optional[Type21] = Field(
        None, description='Type of form field to use.', examples=['name']
    )


class FormsIdPatchRequest(BaseModel):
    cssStyles: Optional[str] = Field(
        None,
        examples=[
            '#ev-widget-form {\n  /*Change this to change the font. Remove to use your website font*/\n  font-family: Helvetica Neue, sans-serif;\n  /*Makes the form the same width as your website */\n  margin: 0 -2%;\n}\n#ev-widget-form label{\n  width: 100%;\n}\n#ev-widget-form input,\n#ev-widget-form textarea {\n  /*Changes color and thickness of borders on form elements */\n  border: 2px solid #ccc;\n  /*Changes spacing inside the form elements (top/bottom and left/right */\n  padding: 5px 5px;\n  /* Changes how far away the inputs are from their label */\n  margin-top: 2px;\n}\n\n#ev-widget-form input:focus,\n#ev-widget-form textarea:focus {\n  /*Changes the color of the form elements when they are clicked in to */\n  border: 2px solid #b2cf88;\n  /*Removes glow effect from form elements that are clicked in to */\n  outline: none;\n}\n\n#ev-widget-form label {\n  font-size: 14px;\n  font-weight: bold;\n  /*Changes color of labels */\n  color: #232323\n}\n\n#ev-widget-form .ev-form-element-description {\n  /*Changes size of descriptions */\n  font-size: 12px;\n  /*Changes color of descriptions */\n  color: #777;\n  /* Changes how far away the descriptions are from their input */\n  margin-top: 2px;\n}\n\n#ev-widget-form textarea {\n  /* Makes textareas (multiline inputs) a taller. */\n  min-height: 90px;\n}     '
        ],
    )
    elements: Optional[List[Element]] = None
    formDescription: Optional[str] = Field(
        None,
        description='Set a description for the form that will be visible to recipients. ',
        examples=['Send your files'],
    )
    submitButtonText: Optional[str] = Field(
        None,
        description='Text to be displayed on the submission button.',
        examples=['Send Files'],
    )
    successMessage: Optional[str] = Field(
        None,
        description='Text to be displayed when a recipient has submitted the form. ',
        examples=['Your files were uploaded'],
    )


class Type22(Enum):
    file = 'file'
    folder = 'folder'
    shared_folder = 'shared_folder'
    send_receipt = 'send_receipt'
    share_receipt = 'share_receipt'
    file_drop = 'file_drop'


class Include2(Enum):
    resource = 'resource'
    share = 'share'
    user = 'user'


class Action1(Enum):
    connect = 'connect'
    download = 'download'
    upload = 'upload'
    delete = 'delete'
    all = 'all'


class Action3(Enum):
    upload = 'upload'
    download = 'download'
    delete = 'delete'
    all = 'all'


class Type24(Enum):
    file = 'file'
    folder = 'folder'


class NotificationsPostRequest(BaseModel):
    action: Action3 = Field(
        ...,
        description='Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)',
        examples=['upload'],
    )
    message: Optional[str] = Field(
        None, description='Custom message to include in notification emails.'
    )
    recipients: Optional[List[EmailStr]] = Field(
        None,
        description="Email addresses to send notification emails to. If not specified, sends to the current user's email address.",
        examples=[['myemail@example.com']],
    )
    resource: str = Field(
        ...,
        description='Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.',
    )
    sendEmail: bool = Field(
        ...,
        description='Set to true if the user should be notified by email when the notification is triggered.',
        examples=[True],
    )
    type: Type24 = Field(
        ...,
        description="What kind of notification you're making. Valid choices are:\n\n- **file** to monitor activity for a file resource\n- **folder** to monitor activity for a folder resource",
        examples=['file'],
    )
    usernames: List[str] = Field(
        ...,
        description="Determines which users' actions should trigger the notification. \n\nRather than listing  individual users, you can also use 3 special options:\n\n- **notice\\_user\\_all** for activity by any user or share recipient\n- **notice\\_user\\_all\\_users** for activity only by user accounts\n- **notice\\_user\\_all\\_recipient** for activity only by share recipients",
    )


class NotificationsIdPatchRequest(BaseModel):
    action: Optional[Action3] = Field(
        None,
        description='Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)',
        examples=['all'],
    )
    message: Optional[str] = Field(
        None,
        description='Custom message to insert into the notification emails, along with the matching activity.',
    )
    recipients: Optional[List[EmailStr]] = Field(
        None,
        description="Email addresses to send notification emails to. If empty, sends to the current user's email address.",
        examples=[['myemail@example.com']],
    )
    sendEmail: Optional[bool] = Field(
        None,
        description='Whether an email should be sent to the recipients when matching activity happens.',
        examples=[True],
    )
    usernames: Optional[List[str]] = Field(
        None,
        description="Determines which users' actions should trigger the notification. \n\nRather than listing  individual users, you can also use 3 special options:\n\n- **notice\\_user\\_all** for activity by any user or share recipient\n- **notice\\_user\\_all\\_users** for activity only by user accounts\n- **notice\\_user\\_all\\_recipients** for activity only by share recipients",
        examples=[['notice_user_all']],
    )


class RecipientsSharesInvitesShareIdPostRequest(BaseModel):
    recipientId: Optional[int] = Field(
        None, description='ID number of recipient to send a new invitation to.'
    )


class ResourcesDeleteRequest(BaseModel):
    resources: List[str] = Field(
        ..., description='Resource identifiers of items to delete.'
    )


class ResourcesPostRequest(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the folder to create. Required if **path** is not used',
    )
    parentResource: Optional[str] = Field(
        None,
        description='Resource identifier where to create a folder. Required if **path** is not used',
    )
    path: Optional[str] = Field(
        None,
        description="Fully-qualified path to the new folder including folder's name",
    )


class ResourcesCompressPostRequest(BaseModel):
    archiveName: Optional[str] = Field(
        None,
        description='Name of the zip archive to create. If left blank, current date will be used.',
    )
    parentResource: Optional[str] = Field(
        None,
        description='Resource identifier of the folder where zip archive should be created.',
    )
    resources: List[str] = Field(
        ...,
        description='Resource identifiers for file(s)/folder(s) to include in new zip file',
    )


class ResourcesCopyPostRequest(BaseModel):
    parentResource: str = Field(
        ..., description='Resource identifier for folder where items will be copied to.'
    )
    resources: List[str] = Field(
        ...,
        description='Resource identifier(s) of items to be copied to a new location',
    )


class Resources1(RootModel[List[str]]):
    root: List[str]


class ResourcesExtractPostRequest(BaseModel):
    parentResource: str = Field(
        ..., description='Resource identifier for folder files should be extracted to.'
    )
    resource: str = Field(
        ..., description='Resource identifier of zip archive to be extracted.'
    )


class ResourcesMovePostRequest(BaseModel):
    parentResource: str = Field(
        ...,
        description='Resource identifier of folder to move files/folders to.',
        examples=['/copyhere'],
    )
    resources: List[str] = Field(
        ...,
        description='Array containing file/folder paths to move.',
        examples=[['/testone.jpg', '/folder']],
    )


class Size(Enum):
    small = 'small'
    medium = 'medium'
    large = 'large'


class ResourcesUploadPostRequest(BaseModel):
    file: Optional[bytes] = None


class ResourcesIdPatchRequest(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The new name for the resource (file or folder).',
        examples=['my-renamed-file.txt'],
    )


class Scope(Enum):
    all = 'all'
    active = 'active'
    currentUser = 'currentUser'


class Sort(Enum):
    created = 'created'
    field_created = '-created'


class Type25(Enum):
    receive = 'receive'
    shared_folder = 'shared_folder'
    send = 'send'


class Recipient(BaseModel):
    email: Optional[EmailStr] = Field(
        None, description='Email address of person you are inviting to the share'
    )
    type: Optional[str] = Field(
        None,
        description='What kind of email should be sent to this recipient. Valid choices are **direct** and **cc**',
    )


class Type27(Enum):
    shared_folder = 'shared_folder'
    receive = 'receive'
    send = 'send'


class SharesPostRequest(BaseModel):
    accessMode: Optional[AccessMode] = None
    embed: Optional[bool] = Field(
        None,
        description='Whether this share can be embedded within a web page.',
        examples=[False],
    )
    expiration: Optional[datetime] = Field(
        None,
        description='Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available.',
        examples=['2017-09-25T14:12:10Z'],
    )
    fileDropCreateFolders: Optional[bool] = Field(
        None,
        description='Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. ',
        examples=[False],
    )
    hasNotification: Optional[bool] = Field(
        None, description='Whether delivery receipts should be sent.', examples=[False]
    )
    isPublic: Optional[bool] = Field(
        None,
        description='Whether someone can visit the share without following a personalized recipient link.',
        examples=[True],
    )
    messageBody: Optional[str] = Field(
        None,
        description='The message to be included in email invitations for your recipients. Ignored if you have not also provided `recipients` and `messageSubject`',
        examples=[None],
    )
    messageSubject: Optional[str] = Field(
        None,
        description='Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `messageBody`',
        examples=['Invitation to a shared folder'],
    )
    name: str = Field(
        ...,
        description='A name for the share. This will be visible on the page that recipients visit. ',
        examples=['Shared Folder'],
    )
    notificationEmails: Optional[List[EmailStr]] = Field(
        None,
        description='Emails that will receive delivery receipts for this share. `hasNotification` must be **true** for delivery receipts will be sent.',
        examples=[['notify@example.com', 'notify2@example.com']],
    )
    password: Optional[str] = Field(
        None,
        description='Set a password for recipients to access the share. All recipients will use the same password.',
        examples=[None],
    )
    recipients: Optional[List[Recipient]] = Field(
        None,
        description='People you want to invite to the share. **Note**: unless you also set the `messageSubject` and `messageBody` for the new share, invitation emails will not be sent to these recipients.',
    )
    requireEmail: Optional[bool] = Field(
        None,
        description='True if recipients must provide their email to view the share.',
        examples=[False],
    )
    resources: Optional[List[str]] = Field(
        None,
        description='Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.\n\n**shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.\n\n**send** shares may have multiple `resource` parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation.\n',
        examples=[['/testfolder']],
    )
    sendingLocalFiles: Optional[bool] = Field(
        None,
        description='Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded.',
    )
    type: Type27 = Field(
        ...,
        description='The type of share to create. See above for a description of each.',
        examples=['shared_folder'],
    )


class SharesIdPatchRequest(BaseModel):
    accessMode: Optional[AccessMode] = None
    embed: Optional[bool] = Field(
        None,
        description='Whether the share can be embedded in another web page.',
        examples=[False],
    )
    expiration: Optional[datetime] = Field(
        None,
        description='New expiration date and time for the share',
        examples=['2017-09-25T14:12:10Z'],
    )
    fileDropCreateFolders: Optional[bool] = Field(
        None,
        description='Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)',
        examples=[False],
    )
    hasNotification: Optional[bool] = Field(
        None,
        description='Whether delivery receipts should be sent for this share.',
        examples=[False],
    )
    isPublic: Optional[bool] = Field(
        None,
        description='Whether people can visit the share without following a link from an invitation email',
        examples=[True],
    )
    messageBody: Optional[str] = Field(
        None,
        description='Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`',
        examples=[None],
    )
    messageSubject: Optional[str] = Field(
        None,
        description='Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`',
        examples=['Invitation to a shared folder'],
    )
    name: Optional[str] = Field(
        None, description='Name of the share.', examples=['Shared Folder']
    )
    notificationEmails: Optional[List[EmailStr]] = Field(
        None,
        description='List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false. ',
        examples=[['notify@example.com', 'notify2@example.com']],
    )
    password: Optional[str] = Field(
        None,
        description='New password for the share. To leave the password unchanged, do not send this parameter.',
        examples=[None],
    )
    recipients: Optional[List[Recipient]] = Field(
        None,
        description='People you want to invite to the share. \n\n**Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.\n\n**Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. ',
    )
    requireEmail: Optional[bool] = Field(
        None,
        description='Whether visitors to the share will be required to enter their email in order to access the share.',
        examples=[False],
    )
    resources: Optional[List[str]] = Field(
        None,
        description='Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.\n\n**shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.\n\n**send** shares may have multiple `resource` parameters. \n\n**NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.',
        examples=[['/testfolder']],
    )
    status: Optional[int] = Field(
        None,
        description='New status for the share. You can set an active share to inactive by setting the status to **0**',
    )


class SshKeysPostRequest(BaseModel):
    publicKey: str = Field(
        ...,
        description='Public Key to provide ExaVault. You can provide the Public Key as formatted from the ssh-keygen command or a standard rfc-4716 format. ',
    )
    userId: int = Field(..., description='ID of the user to assign the new key to. ')


class Permissions(BaseModel):
    changePassword: Optional[bool] = Field(None, examples=[True])
    delete: Optional[bool] = Field(None, examples=[True])
    deleteFormData: Optional[bool] = Field(None, examples=[True])
    download: Optional[bool] = Field(None, examples=[True])
    list: Optional[bool] = Field(None, examples=[True])
    modify: Optional[bool] = Field(None, examples=[True])
    notification: Optional[bool] = Field(None, examples=[True])
    share: Optional[bool] = Field(None, examples=[True])
    upload: Optional[bool] = Field(None, examples=[True])
    viewFormData: Optional[bool] = Field(None, examples=[True])


class Role1(Enum):
    user = 'user'
    admin = 'admin'


class UsersPostRequest(BaseModel):
    email: EmailStr = Field(
        ..., description='Email address for the user', examples=['testuser@example.com']
    )
    expiration: Optional[str] = Field(
        None,
        description='Optional timestamp when the user should expire, formatted in date-time.',
        examples=['2011-03-21 00:18:56'],
    )
    homeResource: str = Field(
        ...,
        description="Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.\n\nThe user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created. \n\nUsers with the `role` **admin** should have their homeResource set to '/'",
        examples=['/'],
    )
    locked: Optional[bool] = Field(
        None,
        description='If true, the user will not be able to log in',
        examples=[True],
    )
    nickname: Optional[str] = Field(
        None,
        description="An optional nickname (e.g. 'David from Sales').",
        examples=['testnickname'],
    )
    onboarding: Optional[bool] = Field(
        None,
        description='Set this to **true** to enable extra help popups in the web file manager for this user.',
        examples=[True],
    )
    password: str = Field(..., description='Password for the user')
    permissions: Permissions = Field(
        ...,
        description='An object containing name/value pairs for each permission. Any permission that is not passed will be set to `false` by default. Note that users will be unable to see any files in the account unless you include `list` permission.\nWhen creating a user with the `role` **admin**, you should set all of the permissions to `true`',
    )
    role: Role1 = Field(
        ...,
        description='The type of user to create, either **user** or **admin**.',
        examples=['user'],
    )
    timeZone: str = Field(
        ...,
        description="Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.\n",
        examples=['America/Los_Angeles'],
    )
    username: str = Field(
        ...,
        description='Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.\n\n**Note** Usernames must be unique across all ExaVault accounts.',
        examples=['testuser'],
    )
    welcomeEmail: Optional[bool] = Field(
        None,
        description='If **true**, send this new user a welcome email upon creation. The content of the welcome email can be configured with the [PATCH /accounts](#operation/updateAccount) method.',
        examples=[True],
    )


class UsersIdPatchRequest(BaseModel):
    email: Optional[EmailStr] = Field(
        None,
        description='Email address for the user',
        examples=['testuser@example.com'],
    )
    expiration: Optional[str] = Field(
        None,
        description='Optional timestamp when the user should expire.',
        examples=['2011-03-21 00:18:56'],
    )
    homeResource: Optional[str] = Field(
        None,
        description="Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.\n\nThe user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user logs in.\n\nThis setting is ignored for users with the `role` **admin**.",
        examples=['/'],
    )
    locked: Optional[bool] = Field(
        None,
        description='If true, the user will be prevented from logging in',
        examples=[True],
    )
    nickname: Optional[str] = Field(
        None,
        description="An optional nickname (e.g. 'David from Sales').",
        examples=['testnickname'],
    )
    onboarding: Optional[bool] = Field(
        None,
        description='Set this to **true** to enable extra help popups in the web file manager for this user.',
        examples=[True],
    )
    password: Optional[str] = Field(None, description='New password for the user')
    permissions: Optional[UserPermissions] = None
    role: Optional[Role1] = Field(
        None,
        description='The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than \'/\', and will have full permissions, but you must provide at least "download,upload,list,delete" in the `permissions` parameter.',
        examples=['user'],
    )
    timeZone: Optional[str] = Field(
        None,
        description="Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.\n",
        examples=['America/Los_Angeles'],
    )
    username: Optional[str] = Field(
        None,
        description='New username for the user. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.\n\n**Note** Usernames must be unique across all ExaVault accounts.',
        examples=['testuser'],
    )


class WebhooksPostRequest(BaseModel):
    endpointUrl: AnyUrl = Field(
        ...,
        description='The endpoint is where the webhook request will be sent.',
        examples=['https://example.com/webhook'],
    )
    resource: Optional[str] = Field(
        None,
        description='Resource identifier for the top folder this webhook is associated with',
        examples=['/uploads-folder'],
    )
    responseVersion: Optional[ResponseVersion] = Field(
        None,
        description='What version of webhook request should be sent to the endpoint URL when messages are sent',
        examples=['v2'],
    )
    triggers: Optional[WebhookTriggers] = None


class ResponseVersion2(Enum):
    v2 = 'v2'
    v1 = 'v1'


class WebhooksIdPatchRequest(BaseModel):
    endpointUrl: Optional[AnyUrl] = Field(
        None,
        description='New endpoint URL to use for the webhook configuration',
        examples=['https://example.com/new-endpoint'],
    )
    resource: Optional[str] = Field(
        None,
        description='Resource identifier of the top folder watched by this webhook.',
        examples=['/newfolder'],
    )
    responseVersion: Optional[ResponseVersion2] = Field(
        None,
        description='Version of the webhooks message to send to the endpoint',
        examples=['v1'],
    )
    triggers: Optional[WebhookTriggers] = None


class AccountAttributes(BaseModel):
    accountName: Optional[str] = Field(None, description='Name of the account')
    accountOnboarding: Optional[bool] = Field(
        None,
        description='Whether the web application onboarding help is enabled for new users in the account.',
        examples=[False],
    )
    allowedIp: Optional[List[AllowedIpItem]] = Field(
        None,
        description='Range of IP addresses allowed to access this account.',
        examples=[[{'ipEnd': '192.30.24.5', 'ipStart': '192.30.23.2'}]],
    )
    branding: Optional[Branding] = Field(
        None,
        description='Branding flag. Set to `true` if the account has branding functionality enabled.',
        examples=[True],
    )
    brandingSettings: Optional[BrandingSettings] = None
    clientId: Optional[int] = Field(
        None,
        description='(ExaVault Use Only) Internal ID of the account in CMS.',
        examples=[1],
    )
    complexPasswords: Optional[bool] = Field(
        None,
        description='Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.',
        examples=[False],
    )
    created: Optional[datetime] = Field(
        None,
        description='Timestamp of account creation.',
        examples=['2017-01-12T09:06:21Z'],
    )
    customDomain: Optional[CustomDomain] = Field(
        None,
        description='Custom domain flag. Set to `true` if account type allows custom domain functionality.',
        examples=[True],
    )
    customSignature: Optional[str] = Field(
        None,
        description='Custom signature for all account emails users or recipients will receive.',
        examples=[None],
    )
    externalDomains: Optional[List[str]] = Field(
        None, description='Custom domain used to brand this account.', examples=[[]]
    )
    maxUsers: Optional[int] = Field(
        None,
        description='Maximum number of users the account can have. This can be increased by contacting ExaVault Support.',
        examples=[1000],
    )
    modified: Optional[datetime] = Field(
        None,
        description='Timestamp of account modification.',
        examples=['2017-06-03T20:42:05Z'],
    )
    planDetails: Optional[PlanDetails] = None
    quota: Optional[Quota] = None
    secureOnly: Optional[bool] = Field(
        None,
        description='Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.',
        examples=[False],
    )
    showReferralLinks: Optional[bool] = Field(
        None,
        description='Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.',
        examples=[True],
    )
    status: Optional[Status] = Field(
        None,
        description='Account status flag. A one (1) means the account is active; zero (0) means it is suspended.',
        examples=[1],
    )
    userCount: Optional[int] = Field(
        None, description='Current number of users on the account.', examples=[3]
    )
    welcomeEmailContent: Optional[str] = Field(
        None,
        description='Content of welcome email each new user will receive.',
        examples=['Welcome to your new account!'],
    )
    welcomeEmailSubject: Optional[str] = Field(
        None,
        description='Subject of welcome email each new user will receive.',
        examples=['ExaVault File Sharing Account'],
    )


class EmailListOwnerUser(BaseModel):
    data: Optional[RelationshipData] = None


class EmailListRelationships(BaseModel):
    ownerUser: Optional[EmailListOwnerUser] = None


class FormAttributes(BaseModel):
    cssStyles: Optional[str] = Field(
        None,
        description='CSS Styles of the form.',
        examples=[
            '#ev-widget-form {\n  /*Change this to change the font. Remove to use your website font*/\n  font-family: Helvetica Neue, sans-serif;\n  /*Makes the form the same width as your website */\n  margin: 0 -2%;\n}\n#ev-widget-form label{\n  width: 100%;\n}\n#ev-widget-form input,\n#ev-widget-form textarea {\n  /*Changes color and thickness of borders on form elements */\n  border: 2px solid #ccc;\n  /*Changes spacing inside the form elements (top/bottom and left/right */\n  padding: 5px 5px;\n  /* Changes how far away the inputs are from their label */\n  margin-top: 2px;\n}\n\n#ev-widget-form input:focus,\n#ev-widget-form textarea:focus {\n  /*Changes the color of the form elements when they are clicked in to */\n  border: 2px solid #b2cf88;\n  /*Removes glow effect from form elements that are clicked in to */\n  outline: none;\n}\n\n#ev-widget-form label {\n  font-size: 14px;\n  font-weight: bold;\n  /*Changes color of labels */\n  color: #232323\n}\n\n#ev-widget-form .ev-form-element-description {\n  /*Changes size of descriptions */\n  font-size: 12px;\n  /*Changes color of descriptions */\n  color: #777;\n  /* Changes how far away the descriptions are from their input */\n  margin-top: 2px;\n}\n\n#ev-widget-form textarea {\n  /* Makes textareas (multiline inputs) a taller. */\n  min-height: 90px;\n}'
        ],
    )
    elements: Optional[List[FormField]] = Field(
        None,
        description='Array of form fields defined for the form',
        examples=[
            [
                {
                    'id': 234,
                    'name': 'Project ID',
                    'order': 0,
                    'settings': {
                        'description': None,
                        'isRequired': False,
                        'useAsFolderName': False,
                        'width': 1,
                    },
                    'type': 'name',
                },
                {
                    'id': 235,
                    'name': 'Your Email',
                    'order': 1,
                    'setings': {
                        'description': 'Enter your email from the registration system',
                        'isRequired': True,
                        'senderEmail': True,
                        'useAsFolderName': True,
                        'width': 1,
                    },
                    'type': 'email',
                },
                {
                    'id': 236,
                    'name': 'Upload Area',
                    'order': 2,
                    'settings': {'fileTypes': None},
                    'type': 'upload_area',
                },
            ]
        ],
    )
    formDescription: Optional[str] = Field(
        None,
        description='Text that appears at the top of a receive form',
        examples=['Upload your photos to us'],
    )
    submitButtonText: Optional[str] = Field(
        None,
        description='Text that appears on the submit button for the form',
        examples=['Send Files'],
    )
    successMessage: Optional[str] = Field(
        None,
        description='Message displayed to submitter after files are uploaded',
        examples=['Your files were uploaded'],
    )


class Attributes(BaseModel):
    created: Optional[datetime] = Field(
        None,
        description='Timestamp of the submission',
        examples=['2019-09-19T18:00:00Z'],
    )
    fields: Optional[List[FormEntryField]] = None
    modified: Optional[datetime] = Field(
        None,
        description='Timestamp of the field modified date',
        examples=['2019-09-20T18:00:00Z'],
    )
    paths: Optional[List[str]] = Field(
        None,
        description='Full paths to files associated with the form submission',
        examples=[['/image1.jpg', '/image2.jpg', '/image3.jpg']],
    )
    status: Optional[Status1] = Field(
        None, description='Form entry status', examples=['completed']
    )


class FormEntry(BaseModel):
    attributes: Optional[Attributes] = None
    id: Optional[int] = Field(None, description='Form entry id', examples=[12345])
    type: Optional[str] = Field(
        None, description='Type of item. "formEntry"', examples=['formEntry']
    )


class FormEntryResponse(BaseModel):
    data: Optional[List[FormEntry]] = Field(
        None, description='Object submissions data for form.'
    )
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response. ', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Number of returned results. ', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total results found. ', examples=[2]
    )


class NotificationAttributes(BaseModel):
    action: Optional[Action] = Field(
        None, description='Action that triggers notification.', examples=['all']
    )
    created: Optional[datetime] = Field(
        None,
        description='Timestamp of notifiction creation.',
        examples=['2011-03-21T00:18:56Z'],
    )
    message: Optional[str] = Field(
        None,
        description='Custom message that will be sent to the notification recipients.',
        examples=[None],
    )
    modified: Optional[datetime] = Field(
        None,
        description='Timestamp of notification modification.',
        examples=['2011-03-21T00:18:56Z'],
    )
    name: Optional[str] = Field(
        None,
        description='Name of the item that the notification is set on.',
        examples=['examplefolder'],
    )
    path: Optional[str] = Field(
        None,
        description='Path to the item that the notification is set on.',
        examples=['/examplefolder'],
    )
    readableDescription: Optional[str] = Field(
        None,
        description='Human readable description of the notification.',
        examples=["anybody changes, downloads or deletes '/examplefile.jpg'"],
    )
    readableDescriptionWithoutPath: Optional[str] = Field(
        None,
        description='Human readable description of the notification without item path.',
        examples=['anybody changes or downloads this file'],
    )
    recipients: Optional[List[NotificationRecipient]] = Field(
        None, description='Notification recipients.'
    )
    sendEmail: Optional[SendEmail] = Field(
        None,
        description='Whether or not an email will send when the notification is triggered.',
        examples=[True],
    )
    shareId: Optional[str] = Field(
        None,
        description='ID of the share that the notification belogns to.',
        examples=[None],
    )
    type: Optional[Type6] = Field(
        None,
        description='Type of the resource the notification is attached to. ',
        examples=['folder'],
    )
    userId: Optional[str] = Field(
        None,
        description='ID of the user that the notification belongs to.',
        examples=[2],
    )
    usernames: Optional[List[str]] = Field(
        None,
        description='Detail on which users can trigger the notification.',
        examples=[['notice_user_all']],
    )


class ResourceModel(BaseModel):
    attributes: Optional[ResourceAttributes] = None
    id: Optional[int] = Field(None, examples=[1])
    relationships: Optional[Relationships3] = None
    type: Literal['Resource'] = Field(
        ..., description='Type of item. "resource"', examples=['resource']
    )


class ResourceCopyMove(BaseModel):
    data: Optional[ResourceModel] = None
    meta: Optional[Dict[str, Any]] = Field(
        None,
        description='Meta object containing non-standard meta-information about the operation.',
        examples=[{'id': 2321}],
    )


class SSHKey(BaseModel):
    attributes: Optional[SSHKeyAttributes] = None
    id: Optional[int] = Field(None, description='ID of the key.', examples=[655621])
    relationships: Optional[Relationships4] = None
    type: Optional[Type10] = Field(
        None, description='Type of the object. ', examples=['sshKey']
    )


class ShareAttributes(BaseModel):
    accessDescription: Optional[str] = Field(
        None,
        description='Description of the share access rights.',
        examples=['Download only'],
    )
    accessMode: Optional[AccessMode] = None
    created: Optional[datetime] = Field(
        None,
        description='Timestamp of share creation.',
        examples=['2017-01-28T13:10:47Z'],
    )
    embed: Optional[bool] = Field(
        None, description='True if share can be embedded.', examples=[False]
    )
    expiration: Optional[str] = Field(
        None, description='Expiration date of the share.', examples=[None]
    )
    expired: Optional[Expired] = Field(
        None, description='True if the share has expired.', examples=[False]
    )
    fileDropCreateFolders: Optional[FileDropCreateFolders] = Field(
        None,
        description='Flag to show if separate folders should be created for each file upload to receive folder.',
        examples=[False],
    )
    formId: Optional[int] = Field(None, description='ID of the form.')
    hasNotification: Optional[HasNotification] = Field(
        None, description='True if share has notification.', examples=[False]
    )
    hasPassword: Optional[HasPassword] = Field(
        None, description='True if the share has password.', examples=[False]
    )
    hash: Optional[str] = Field(
        None, description='Share hash.', examples=['hd1e-3erufo72']
    )
    inherited: Optional[Inherited] = Field(
        None,
        description='True if share inherited from parent folder.',
        examples=[False],
    )
    messages: Optional[List[ShareMessage]] = Field(
        None, description='Array of invitation messages.'
    )
    modified: Optional[datetime] = Field(
        None,
        description="Timestamp of share modification. Can be `null` if it wasn't modified.",
        examples=[None],
    )
    name: Optional[str] = Field(
        None, description='Share name.', examples=['Example Folder']
    )
    ownerHash: Optional[str] = Field(
        None, description="Share owner's hash.", examples=['hd1e-3erufo72-fsxak999']
    )
    paths: Optional[List[str]] = Field(
        None,
        description='Path to the shared resource in your account.',
        examples=[['/Example Folder']],
    )
    public: Optional[Public] = Field(
        None, description='True if the share has a public url.', examples=[True]
    )
    recipients: Optional[List[ShareRecipient]] = Field(
        None,
        description='Array of recipients.',
        examples=[
            [
                {
                    'created': '2017-04-21T10:53:47Z',
                    'email': 'recipient@example.com',
                    'hash': 'fseowxan',
                    'id': 2,
                    'received': False,
                    'sent': True,
                    'shareId': 23,
                    'type': 'direct',
                }
            ]
        ],
    )
    requireEmail: Optional[bool] = Field(
        None, description='True if share requires email to access.', examples=[True]
    )
    resent: Optional[datetime] = Field(
        None,
        description='Invitations resent date. Can be `null` if resent never happened.',
        examples=[None],
    )
    status: Optional[Status2] = Field(
        None,
        description='Share activity status. Can be active (1) or deactivated (0).',
        examples=[1],
    )
    trackingStatus: Optional[TrackingStatus] = Field(
        None,
        description="Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)",
    )
    type: Optional[Type16] = Field(
        None, description='Type of share.', examples=['shared_folder']
    )


class UserAttributes(BaseModel):
    accessTimestamp: Optional[str] = Field(
        None,
        description='Timestamp of most recent successful user login.',
        examples=['2011-03-21T00:18:56-07:00'],
    )
    accountName: str = Field(
        ...,
        description='Name of the account this user belongs to.',
        examples=['exampleaccount'],
    )
    created: datetime = Field(
        ...,
        description='Timestamp of user creation.',
        examples=['2018-07-27T15:43:55-07:00'],
    )
    email: Optional[str] = Field(
        None,
        description='Email address of the user.',
        examples=['example@exavault.mail'],
    )
    expiration: Optional[str] = Field(
        None,
        description='Timestamp of user expiration.',
        examples=['2020-06-30T13:33:30-07:00'],
    )
    firstLogin: Optional[bool] = Field(
        None,
        description='`true` if the user has logged into the system.',
        examples=[False],
    )
    homePath: Optional[str] = Field(
        None, description="Path to the user's home folder.", examples=['/']
    )
    locked: Optional[bool] = Field(
        None,
        description='`true` if the user is locked and cannot log in.',
        examples=[False],
    )
    modified: datetime = Field(
        ...,
        description='Timestamp of user modification.',
        examples=['2018-07-29T15:43:55-07:00'],
    )
    nickname: str = Field(
        ..., description='Nickname of the user.', examples=['exampleuser']
    )
    onboarding: bool = Field(
        ...,
        description='Whether the onboarding help system is enabled for this user. `true` means that additional help popups are displayed in the web application for this user.',
        examples=[False],
    )
    permissions: UserPermissions
    role: Role = Field(..., description="User's access level", examples=['user'])
    status: Status2 = Field(
        ...,
        description='Indicates user activity status. `0` means the user is locked and cannot log in. `1` means the user is active and can log in.',
        examples=[1],
    )
    timeZone: str = Field(
        ...,
        description="User's timezone. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.",
        examples=['America/Chicago'],
    )
    username: str = Field(
        ..., description='Username of the user.', examples=['exampleuser']
    )


class WebhookAttributes(BaseModel):
    created: Optional[datetime] = Field(
        None,
        description='Timestamp when webhook configuration was added to system.',
        examples=['2021-03-04T22:22:00-08:00'],
    )
    endpointUrl: Optional[AnyUrl] = Field(
        None,
        description='The endpoint is where the webhook request will be sent.',
        examples=['https://example.com/webhook'],
    )
    failed: Optional[bool] = Field(
        None,
        description='Whether webhook has been disabled for too many consecutive failures',
    )
    modified: Optional[datetime] = Field(
        None,
        description='Timestamp when webhook configuration was last modified',
        examples=['2021-03-04T22:23:03-08:00'],
    )
    responseVersion: Optional[ResponseVersion] = Field(
        None,
        description='The version of webhook request to send to the endpoint URL',
        examples=['v2'],
    )
    triggers: Optional[WebhookTriggers] = None
    verificationToken: Optional[str] = Field(
        None,
        description='Token for verifying sender is ExaVault',
        examples=['8df8200f7dee90ba4a41abe39c858c6c'],
    )


class Account(BaseModel):
    attributes: Optional[AccountAttributes] = None
    id: Optional[int] = Field(None, description='Account ID', examples=[13758])
    relationships: Optional[Relationships] = Field(None, title='MasterUser')
    type: Literal['Account'] = Field(..., description='Type of item. "account"')


class EmailList(BaseModel):
    attributes: Optional[EmailListAttributes] = None
    id: Optional[int] = Field(None, description='ID of the email list')
    relationships: Optional[EmailListRelationships] = None
    type: Optional[str] = Field(None, description='Type of record. "emailList"')


class Form(BaseModel):
    attributes: Optional[FormAttributes] = None
    id: Optional[int] = Field(None, description='ID of the form.', examples=[823752])
    relationships: Optional[Relationships1] = Field(
        None, description='Share relationship data of the form. '
    )
    type: Optional[str] = Field(None, description='Type is "form".', examples=['form'])


class Notification(BaseModel):
    attributes: Optional[NotificationAttributes] = None
    id: Optional[int] = Field(None, examples=[1])
    relationships: Optional[Relationships2] = None
    type: Literal['Notification'] = Field(..., examples=['notification'])


class ShareModel(BaseModel):
    attributes: Optional[ShareAttributes] = None
    id: Optional[int] = Field(None, description='ID of the share.', examples=[655621])
    relationships: Optional[Relationships5] = Field(
        None,
        description='Message, owner, resource, and notification relationships of the share. ',
        title='ShareRelationships',
    )
    type: Literal['Share'] = Field(
        ..., description='Type of the share. ', examples=['share']
    )


class User(BaseModel):
    attributes: Optional[UserAttributes] = None
    id: Optional[int] = Field(None, description='ID of the user.', examples=[655621])
    relationships: Optional[Relationships6] = Field(
        None,
        description='Home resource and owner account relationship data for the user. ',
    )
    type: Literal['User'] = Field(
        ...,
        description='Type of object being returned. Always "user"',
        examples=['user'],
    )


class Included6(RootModel[Union[Account, ResourceModel]]):
    root: Union[Account, ResourceModel] = Field(..., discriminator='type')


class UserCollectionResponse(BaseModel):
    data: Optional[List[User]] = None
    included: Optional[List[Included6]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response. ', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Number of results returned.', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total results found.', examples=[2]
    )


class UserResponse(BaseModel):
    data: Optional[User] = None
    included: Optional[List[Included6]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http code for the response.', examples=[200]
    )


class Webhook(BaseModel):
    attributes: Optional[WebhookAttributes] = None
    id: Optional[int] = None
    relationships: Optional[Relationships7] = None
    type: Optional[str] = Field(
        None, description='Type of thing it is. "webhook"', examples=['webhook']
    )


class WebhookCollectionResponse(BaseModel):
    data: Optional[List[Webhook]] = None
    included: Optional[List[Included6]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response. ', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Number of results returned.', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total results found.', examples=[2]
    )


class WebhookResponse(BaseModel):
    data: Optional[List[Webhook]] = None
    included: Optional[List[Included6]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response. ', examples=[200]
    )


class AccountResponse(BaseModel):
    data: Optional[Account] = None
    included: Optional[List[User]] = Field(
        None,
        description='Array can contain objects specified in include param of the get call e.g User object',
    )
    responseStatus: Optional[int] = Field(None, examples=[200])


class EmailListCollectionResponse(BaseModel):
    data: Optional[List[EmailList]] = None
    included: Optional[List[User]] = None
    responseStatus: Optional[int] = Field(None, description='Http status of response')
    returnedResults: Optional[conint(ge=0)] = None
    totalResults: Optional[conint(ge=0)] = None


class EmailListResponse(BaseModel):
    data: Optional[EmailList] = None
    included: Optional[List[User]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http Status code', examples=[200]
    )


class FormResponse(BaseModel):
    data: Optional[Form] = None
    included: Optional[List[ShareModel]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response. ', examples=[200]
    )


class Included(RootModel[Union[ShareModel, User, ResourceModel]]):
    root: Union[ShareModel, User, ResourceModel] = Field(..., discriminator='type')


class NotificationCollectionResponse(BaseModel):
    data: Optional[List[Notification]] = None
    included: Optional[List[Included]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Number of returned results.', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total results found. ', examples=[2]
    )


class NotificationResponse(BaseModel):
    data: Optional[Notification] = None
    included: Optional[List[Included]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )


class Included2(
    RootModel[Union[User, Account, ResourceModel, Notification, ShareModel]]
):
    root: Union[User, Account, ResourceModel, Notification, ShareModel] = Field(
        ..., discriminator='type'
    )


class ResourceCollectionResponse(BaseModel):
    data: Optional[List[ResourceModel]] = None
    included: Optional[List[Included2]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Count of returned results.', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total count of results found.', examples=[2]
    )


class ResourceResponse(BaseModel):
    data: Optional[ResourceModel] = None
    included: Optional[List[Included2]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response. ', examples=[200]
    )


class SSHKeyCollectionResponse(BaseModel):
    data: Optional[List[SSHKey]] = None
    included: Optional[List[User]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Number of returned results.', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total results found. ', examples=[2]
    )


class SSHKeyResponse(BaseModel):
    data: Optional[SSHKey] = None
    included: Optional[List[User]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.'
    )


class Included4(RootModel[Union[User, Notification, ResourceModel]]):
    root: Union[User, Notification, ResourceModel] = Field(..., discriminator='type')


class ShareCollectionResponse(BaseModel):
    data: Optional[List[ShareModel]] = None
    included: Optional[List[Included4]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )
    returnedResults: Optional[int] = Field(
        None, description='Number of returned results.', examples=[2]
    )
    totalResults: Optional[int] = Field(
        None, description='Total results found. ', examples=[2]
    )


class ShareResponse(BaseModel):
    data: Optional[ShareModel] = None
    included: Optional[List[Included4]] = None
    responseStatus: Optional[int] = Field(
        None, description='Http status code of the response.', examples=[200]
    )
